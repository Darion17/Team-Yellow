F-01 Load First N Records

Test 1.1 — Read N Records from CSV
Arrange: Prepare a CSV file with 10 records.
Act: Run Driver.loadFirstN("insurance.csv", 5)
Assert: Output should list the first 5 rows only with correct field parsing (Age, Sex, BMI, Children, Smoker, Region, Charges).
Result: Success


Test 1.2 — Empty CSV
Arrange: Create an empty file.
Act: Run Driver.loadFirstN("empty.csv", 3)
Assert: Output should show I/O error: Empty CSV (no header).
Result: Success 

FEATURE 02 — Basic Statistics (count, min, max, avg)
Test 2.1 — Computes correct stats on a small sample
Arrange:
  Data = [
    (20, m, 25.0, 0, no,  north, 1000),
    (50, f, 30.0, 2, yes, south, 3000),
    (30, m, 28.0, 1, no,  north, 2000)
  ]
Act:
  Compute stats for columns: age, bmi, children, charges.
Expected Result:
  age:     count=3, min=20,   max=50,   avg=33.3333
  bmi:     count=3, min=25.0, max=30.0, avg=27.6667
  children:count=3, min=0,    max=2,    avg=1.0000
  charges: count=3, min=1000, max=3000, avg=2000.0000


F-03 Age Histogram (Per Age)

Test 3.1 — Plot Histogram from Sample Data
Arrange: Provide 5 records with ages 18, 19, 19, 20, 20.
Act: Call Driver.printPerAgeHistogram(ages, 50)
Assert: Output should print each age with a bar length scaled to frequency.
Result: Success

Test 3.2 — No Ages in List
Arrange: Use empty list.
Act: Call Driver.printPerAgeHistogram([], 50)
Assert: Output should say No ages to plot.
Result: Success 

FEATURE 04 — Vertical BMI Histogram (bin size = 5)
Test 4.1 — Bins by floor of bin size
Arrange:
  Data = [
    (25, m, 25.0, 0, no,  north, 1000),   // bin 25
    (45, f, 30.0, 1, no,  north, 2000),   // bin 30
    (30, m, 28.0, 2, yes, south, 3000)    // bin 25
  ]
Act:
  Build BMI bins with binSize=5.
Expected Result:
  Bin 25 => 2
  Bin 30 => 1
  No other bins.

F-05 Children Counts

Test 5.1 — Count by Children Number
Arrange: Create records with 0, 1, 2, 2 children.
Act: Run Driver.childrenCounts(records)
Assert: Output should show children=0→1, 1→1, 2→2.
Result: Success

Test 5.2 — Empty List
Arrange: Use no records.
Act: Call Driver.childrenCounts([])
Assert: Output should show Total records by number of children: and nothing else.
Result: Success

FEATURE 06 — Vertical Histogram: Smokers vs Non-Smokers
Test 6.1 — Counts yes vs no
Arrange:
  Data = [
    (30, m, 27.0, 0, no,  north, 1000),
    (55, f, 31.0, 1, yes, south, 3000),
    (40, m, 26.0, 2, no,  south, 2000)
  ]
Act:
  Count “smoker” vs “non-smoker”.
Expected Result:
  smoker = 1
  non-smoker = 2

F-07 Region Fairness

Test 7.1 — Fair Distribution
Arrange: 4 regions each with equal counts.
Act: Run feature07_fairWithin5Percent(records)
Assert: Returns TRUE when spread ≤5%.
Result: Success

Test 7.2 — Uneven Distribution
Arrange: 6 records, 4 from “south” and 2 from “north.”
Act: Run feature07_fairWithin5Percent(records)
Assert: Returns FALSE.
Result: Success 

FEATURE 08 — Avg charges (age ≥ 50) at least 2× (age ≤ 20)?
Test 8.1 — TRUE when at least double
Arrange:
  Data = [
    (18, m, 22.0, 0, no, north, 1000),
    (19, m, 23.0, 0, no, north, 1000),
    (60, f, 28.0, 0, no, south, 4000)
  ]
Act:
  Compare avg charges for age ≥50 vs ≤20.
Expected Result:
  oldAvg=4000, youngAvg=1000 ⇒ TRUE

Test 8.2 — FALSE when not double
Arrange:
  Data = [
    (18, m, 22.0, 0, no, north, 2000),
    (55, f, 28.0, 0, no, south, 3000)
  ]
Act:
  Compare avg charges.
Expected Result:
  oldAvg=3000, youngAvg=2000 ⇒ FALSE


F-09 BMI Range Comparison

Test 9.1 — 30–45 Has Widest Range
Arrange: Assign BMI/charges to create wider middle range.
Act: Run feature09_bmi30to45HasWiderChargeRange(records)
Assert: Returns TRUE.
Result: Success

Test 9.2 — Narrow Middle Range
Arrange: Use lower charge variation in 30–45.
Act: Run same function.
Assert: Returns FALSE.
Result: Success

F-11 Smokers Higher Avg & Wider Range

Test 11.1 — Smokers Pay More
Arrange: Set smokers with higher avg and range of charges.
Act: Call feature11_smokersHigherAvgAndWider(records)
Assert: Output should be TRUE.
Result: Success

Test 11.2 — Equal Range
Arrange: Smokers and non-smokers have same charge range.
Act: Call same.
Assert: Output FALSE.
Result: Success

F-13 Smokers Lower BMI

Test 13.1 — Smokers Have Lower Avg BMI
Arrange: Set smokers’ BMI < non-smokers.
Act: Run feature13_smokersLowerBmi(records)
Assert: Output TRUE.
Result: Success

Test 13.2 — Opposite Case
Arrange: Smokers’ BMI > non-smokers.
Act: Run same function.
Assert: Output FALSE.
Result: Success

F-15 Regions by Average Charges

Test 15.1 — Sorted Descending
Arrange: Regions with known averages (south > north > east).
Act: Run feature15_regionsByAvgChargesDesc(records)
Assert: Verify order of output list descending by avg charge.
Result: Success

Test 15.2 — Equal Averages
Arrange: All regions same charge avg.
Act: Run same.
Assert: Order stable (alphabetical).
Result: Success

F-17 South vs North Smoking

Test 17.1 — South Has Higher Rate
Arrange: Make southern region have higher smoker ratio.
Act: Run feature17_southVsNorthSmokingRatesAndAvgAge(records)
Assert: Returns array where south rate > north rate.
Result: Success

Test 17.2 — Equal Rates
Arrange: Make smoker ratios equal.
Act: Same function.
Assert: Output shows equal rates.
Result: Success

F-19 South vs North Children and Age

Test 19.1 — South Has More Kids
Arrange: Southerners have avg 3 kids, northerners avg 1.
Act: Call feature19_childrenSouthVsNorthAges(records)
Assert: south_avg_children > north_avg_children.
Result: Success

Test 19.2 — Equal Kids
Arrange: Equal number of children.
Act: Same function.
Assert: Output FALSE.
Result: Success

F-21 Regression: Children vs Charges

Test 21.1 — Linear Trend Exists
Arrange: Synthetic dataset where charges rise with children count.
Act: Run feature21_regressionChildren(records)
Assert: Output line “y = intercept + slope*x” with positive slope.
Result: Success

Test 21.2 — Constant Charges
Arrange: All charges equal.
Act: Same function.
Assert: Output “Cannot compute regression.”
Result: Success 


